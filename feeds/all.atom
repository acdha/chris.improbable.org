<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chris Adams' Blog</title>
  <id>http://chris.improbable.org/</id>
  <link href="http://chris.improbable.org/feeds/all.atom" rel="self"/>
  <subtitle>Chris Adams’ personal weblog</subtitle>
  <author>
    <name>Chris Adams</name>
    <email>chris@improbable.org</email>
  </author>
  <updated>2014-08-25T16:05:28+00:00</updated>
  <entry>
    <title>So you think you know what a number is…</title>
    <id>http://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/</id>
    <link href="http://chris.improbable.org/2014/8/25/adventures-in-unicode-digits/"/>
    <summary>So you think you know what a number is or why Python's idea of a digit is probably wider than you think</summary>
    <content type="html">&lt;p&gt;
                        I was recently surprised by a 404 which I noticed in &lt;a href="https://www.google.com/webmasters/tools"&gt;Google's Webmaster Tools&lt;/a&gt;,
                        which pointed to a truncated URL (&lt;code&gt;http://www.wdl.org/en/item/&lt;/code&gt;) which is
                        never actually linked to. This happens frequently but in this case the failure was
                        interesting because the source link was an unlinked URL on a Persian blog and the
                        source link actually worked:

                        &lt;a href="http://www.wdl.org/en/item/%DB%B2%DB%B6%DB%B7%DB%B9/" title="Map of Persia and Adjacent Countries, for Sir John Malcolm's History of Persia - World Digital Library"&gt;http://www.wdl.org/en/item/۲۶۷۹/&lt;/a&gt;.&lt;br&gt;

                        The canonical URL for that page is

                        &lt;a href="http://www.wdl.org/en/item/2679/" title="Map of Persia and Adjacent Countries, for Sir John Malcolm's History of Persia - World Digital Library"&gt;http://www.wdl.org/en/item/2679/&lt;/a&gt;
                        and the author had presumably pasted the URL into a page where their software had
                        helpfully converted the latin digits (e.g. &lt;code&gt;0123456789&lt;/code&gt;) into what are
                        known as

                        &lt;a href="http://en.wikipedia.org/wiki/Eastern_Arabic_numerals" title="Eastern Arabic numerals - Wikipedia, the free encyclopedia"&gt;Eastern Arabic, Hindi or Indic-Arabic numerals&lt;/a&gt;:
                        &lt;code&gt;٠١٢٣٤٥٦٧٨٩&lt;/code&gt; (a closer look shows that this is the Persian variant as the
                        6 is actually &lt;abbr title="EXTENDED ARABIC-INDIC DIGIT SIX"&gt;۶&lt;/abbr&gt; instead of
                        &lt;abbr title="ARABIC-INDIC DIGIT SIX"&gt;٦&lt;/abbr&gt;).
                    &lt;/p&gt;

                    &lt;p&gt;
                        Presumably Googlebot scans HTML for text which look like URLs but uses a limited
                        parser which breaks as soon as it finds a character which isn't in a limited set of
                        characters, presumably only ISO-8859-1, causing it to break the URL while other services
                        (e.g. Facebook, Google+, Github, etc.) extract the full URL.
                    &lt;/p&gt;

                    &lt;p&gt;
                        So … mystery solved, we're done, right?
                    &lt;/p&gt;

                    &lt;p&gt;
                        Wait, why does that URL work in the first place? We never added that as a supported
                        feature and, being security-aware, all of our URLs are carefully validated to ensure
                        that the IDs are valid numeric values – both as part of
                        &lt;a href="https://docs.djangoproject.com/en/dev/topics/http/urls/"&gt;Django's URL dispatching&lt;/a&gt;
                        and when the item is retrieved from the database. Besides, since the item IDs aren't
                        assigned using Eastern-Arabic digits how does it actually match the record?
                    &lt;/p&gt;

                    &lt;p&gt;
                        Python's documentation for &lt;code&gt;int()&lt;/code&gt; doesn't mention anything about this but
                        &lt;a href="https://docs.python.org/2/library/stdtypes.html#unicode.isdecimal"&gt;&lt;code&gt;isdecimal()&lt;/code&gt;&lt;/a&gt;
                        gives us a clue:
                    &lt;/p&gt;

                    &lt;blockquote&gt;
                        Decimal characters include digit characters, and all characters that can be used to form decimal-radix numbers, e.g. U+0660, ARABIC-INDIC DIGIT ZERO.
                    &lt;/blockquote&gt;

                    &lt;p&gt;
                        What's happening here is that Python uses the &lt;a href="http://www.unicode.org/"&gt;Unicode&lt;/a&gt; definition of “digit”, which is actually a fairly long list.
                        The specification uses the
                        &lt;a href="http://www.unicode.org/versions/Unicode6.0.0/ch04.pdf"&gt;“Nd = Number, decimal digit” classification&lt;/a&gt;
                        and a quick look at the
                        &lt;a href="http://www.unicode.org/Public/UNIDATA/ScriptExtensions.txt"&gt;Unidata script extensions list&lt;/a&gt;
                        shows quite a few different characters flagged with Nd. Python should treat all of those
                        as valid digits for the purposes of calling &lt;code&gt;int()&lt;/code&gt;, &lt;code&gt;isdecimal()&lt;/code&gt;,
                        and even the regular expressions used to validate our URLs. ۲۶۷۹ will match &lt;code&gt;\d+&lt;/code&gt;
                        and will have been converted to the number &lt;code&gt;2679&lt;/code&gt; by the time the database
                        sees it.
                    &lt;/p&gt;

                    &lt;p&gt;
                        If you want to see this in action, I created a quick &lt;a href="https://gist.github.com/acdha/e9d22a7c37961d043f58"&gt;test script which allows you to test numeric characters&lt;/a&gt; from &lt;a href="http://www.fileformat.info/info/unicode/category/Nd/list.htm" title="Unicode Characters in the 'Number, Decimal Digit' Category"&gt;the full list&lt;/a&gt;.
                        Try it interactively in your browser: &lt;a target="_blank" href="http://repl.it/X3G"&gt;http://repl.it/X3G&lt;/a&gt;.
                    &lt;/p&gt;

                    &lt;p&gt;
                        Left as an exercise for the reader is building a tool which will translate URLs to a specific script, such as this Burmese variant for the Ramayana:
                        &lt;a href="http://www.wdl.org/en/item/%E1%81%81%E1%81%84%E1%81%82%E1%81%88%E1%81%85/" title="Ramayana - World Digital Library"&gt;http://www.wdl.org/en/item/၁၄၂၈၅/&lt;/a&gt;
                    &lt;/p&gt;</content>
    <updated>2014-08-25T16:05:28+00:00</updated>
  </entry>
  <entry>
    <title>Content search on a budget</title>
    <id>http://chris.improbable.org/2014/3/17/content-search-on-a-budget/</id>
    <link href="http://chris.improbable.org/2014/3/17/content-search-on-a-budget/"/>
    <summary>Automating bulk OCR and full-text search using Tesseract and Solr</summary>
    <content type="html">&lt;p&gt;
                        Digitizing printed material has become an industrial process for large collections. Modern scanning equipment makes it easy to process millions of pages and concerted engineering effort has even produced options at the high-end for &lt;a href="http://www.flickr.com/photos/acdha/7404633950/in/set-72157628000441127/"&gt;fragile rare items&lt;/a&gt; while innovative open-source projects like &lt;a href="http://projectgado.org/our-technology/"&gt;Project Gado&lt;/a&gt; make continual progress reducing the cost of reliable, batch scanning to fit almost any organization's budget.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Such efficiencies are great for our goals of preserving history and making it available but they start making painfully obvious the degree to which digitization capacity outstrips our ability to create metadata. This is a big problem because most of the ways we find information involves searching for text and a large TIFF file is effectively invisible to a full-text search engine. The classic library solution to this challenge has been cataloging but the required labor is well beyond most budgets and runs into philosophical challenges when users want to search on something which wasn't considered noteworthy at the time an item was cataloged.
                    &lt;/p&gt;
                    &lt;p&gt;
                        In the spirit of finding &lt;a href="http://www.artima.com/intv/simplest.html"&gt;the simplest thing that could possibly work&lt;/a&gt; I've been experimenting with a completely automated approach to perform &lt;a href="http://en.wikipedia.org/wiki/OCR" title="Optical Character Recognition"&gt;OCR&lt;/a&gt; on new items and offering combined full-text search over both the available metadata and OCR text, as can be seen in this example:
                    &lt;/p&gt;
                    &lt;figure&gt;
                        &lt;img src="Screenshot%202014-03-17%2018.26.21.png"&gt;
                        &lt;figcaption&gt;
                            &lt;a href="http://www.wdl.org/en/search/?q=whales&amp;amp;qla=en"&gt;Searching for “whales” on the World Digital Library&lt;/a&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;h3 id="process-overview"&gt;
                        The Process
                    &lt;/h3&gt;
                    &lt;h4 id="generating-ocr"&gt;
                        Generating OCR text
                    &lt;/h4&gt;
                    &lt;p&gt;
                        As we receive new items, anything which matches our criteria (books, journals and newspapers created after 1800 — see below) is automatically placed into a &lt;a href="http://www.celeryproject.org/"&gt;Celery task queue&lt;/a&gt; as a low-priority task. Workers on multiple servers accept OCR tasks from the queue and process the master image using &lt;a href="https://code.google.com/p/tesseract-ocr/"&gt;Tesseract&lt;/a&gt; using a simple shell command to generate text and HTML with embedded &lt;a href="http://en.wikipedia.org/wiki/HOCR"&gt;hOCR metadata&lt;/a&gt;.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Once we have the OCR text, it's transformed to solve two different needs: a full-text search engine like &lt;a href="https://lucene.apache.org/solr/"&gt;Apache Solr&lt;/a&gt; or &lt;a href="http://www.elasticsearch.org/"&gt;ElasticSearch&lt;/a&gt; works with the pure text output but because we want to be able to highlight specific words the task also &lt;a href="https://gist.github.com/acdha/9610005"&gt;converts the hOCR into a word coordinates JSON file&lt;/a&gt; with the pixel coordinates for every word on the page.
                    &lt;/p&gt;
                    &lt;h4 id="search-indexing"&gt;
                        Indexing the text for search
                    &lt;/h4&gt;
                    &lt;p&gt;
                        Most people expect a combined search these days where relevant terms are selected from both descriptive metadata and the text contents. Simply combining all of the text into a single document to be indexed is unsuitable, however, because we want to be able to offer the ability to only search metadata in certain cases and we want to be able to return specific pages rather than telling someone to visually scan through a 700 page book. Unfortunately, this approach is incompatible with the normal way search engines determine the most relevant results for a query:
                    &lt;/p&gt;
                    &lt;aside style="margin: .3em 1em; float: right; width: 20em;"&gt;
                        &lt;h5 style="margin: 0"&gt;
                            Background: how search engines work
                        &lt;/h5&gt;Most search engines use an &lt;a href="http://en.wikipedia.org/wiki/Inverted_index" title="Inverted index - Wikipedia, the free encyclopedia"&gt;inverted index&lt;/a&gt;, which is essentially a list of words and the documents which contain them. When you search for “whales”, the search engine simply looks for that entry in the index and retrieves the document list. The search engine next sorts the results by calculating a relevancy score for each document (see the &lt;a href="http://lucene.apache.org/core/3_5_0/scoring.html" title="Apache Lucene - Scoring"&gt;Lucene scoring guide&lt;/a&gt; for the exact details about how &lt;a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf" title="tf–idf - Wikipedia, the free encyclopedia"&gt;TD-IDF&lt;/a&gt; works) and returns the top scores first.
                    &lt;/aside&gt;
                    &lt;p&gt;
                        Storing each page separately means that the search score will be determined independently rather than for the entire item. This would prevent books from scoring highly unless all of the words were mentioned on a single page and, far worse, many queries would return pages from a single book mixed throughout the results based on their individual scores! The solution this final problem is a technique which Solr calls &lt;a href="https://wiki.apache.org/solr/FieldCollapsing"&gt;Field Collapsing&lt;/a&gt; (the ElasticSearch team is &lt;a href="https://github.com/elasticsearch/elasticsearch/issues/256"&gt;working on a similar feature&lt;/a&gt;). With field collapsing enabled, Solr will first group all of the matching documents using a specified fieldand then compute the scores for each combined &lt;em&gt;group&lt;/em&gt;. This means that we can group our results by the item ID and receive a list of groups (i.e. items) with one or more documents (i.e. pages or metadata) which we can use to build exact links into a large book.
                    &lt;/p&gt;
                    &lt;aside&gt;
                        (I have released an experimental &lt;a href="http://haystacksearch.org"&gt;django-haystack&lt;/a&gt; &lt;a href="https://gist.github.com/acdha/3750774"&gt;Solr grouped search backend&lt;/a&gt; which adds support for Field Collapsing.)
                    &lt;/aside&gt;
                    &lt;h4 id="highlighting-results"&gt;
                        Highlighting Results
                    &lt;/h4&gt;
                    &lt;p&gt;
                        Search results are returned as simple HTML with the embedded data which we'll need to provide the original image segments. Here's what happens when someone &lt;a href="http://www.wdl.org/en/search/?q=guine%C3%A9&amp;amp;qla=fr"&gt;searches for guineé&lt;/a&gt;:
                    &lt;/p&gt;
                    &lt;ol&gt;
                        &lt;li&gt;Solr performs its normal &lt;a href="https://wiki.apache.org/solr/LanguageAnalysis"&gt;language analysis&lt;/a&gt; and selects relevant documents
                        &lt;/li&gt;
                        &lt;li&gt;All of the documents are grouped by item ID and each group is ranked for relevance
                        &lt;/li&gt;
                        &lt;li&gt;Solr &lt;a href="http://wiki.apache.org/solr/HighlightingParameters"&gt;highlights&lt;/a&gt; the matched terms in the response
                        &lt;/li&gt;
                        &lt;li&gt;The web site formats all of the results into an HTML document and adds some metadata indicating the type of document which contained each match so it can be enhanced by JavaScript later
                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;figure&gt;
                        &lt;img src="Screenshot%202014-03-17%2019.20.06.png"&gt;
                        &lt;figcaption&gt;
                            The raw search results before JavaScript runs
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;p&gt;
                        At this point we have quickly returned search results and can link directly to individual pages but we're showing frequently ugly OCR text directly and not providing as much context as we'd like. The next step is to replace that raw text with an image slice from the scanned page:
                    &lt;/p&gt;
                    &lt;ol&gt;
                        &lt;li&gt;JavaScript looks for highlighted results from OCR text and uses the embedded microdata to determine the source volume and page
                        &lt;/li&gt;
                        &lt;li&gt;An &lt;a href="http://en.wikipedia.org/wiki/XMLHttpRequest" title="XMLHttpRequest - Wikipedia, the free encyclopedia"&gt;XHR request&lt;/a&gt; is made to retrieve the word coordinates for every word on each returned page
                        &lt;/li&gt;
                        &lt;li&gt;The word coordinate list is scanned for each highlighted word and the coordinates are selected. Since we often find words in multiple places on the same page and we want to display an easily readable section of text, the list of word coordinates is coalesced starting from the top of the page and no more than the first third of the page will be returned. For this display, we always use the full width of the page but the same process could be used to generate smaller slices if desired.
                        &lt;/li&gt;
                        &lt;li&gt;A separate request is made to load the relevant image slice. When the image has loaded, we replace the raw OCR text with the image. This way the raw text is visible for as long as it takes to load the image so we avoid showing empty areas until everything has transferred.
                        &lt;/li&gt;
                        &lt;li&gt;Finally, a partially-transparent overlay is displayed over the image for each word coordinate to highlight the matches (see e.g. &lt;a href="http://css-tricks.com/text-blocks-over-image/"&gt;css-tricks.com&lt;/a&gt; if you're not familiar with this form of CSS positioning). Since the OCRed word coordinates aren't consistently tightly cropped around the letters in the word a minor &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;CSS box-shadow&lt;/a&gt; is used to make the edges softer and more like a highlighter.
                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;h4 id="notes"&gt;
                        Notes
                    &lt;/h4&gt;
                    &lt;ul&gt;
                        &lt;li&gt;From a workflow perspective, I highly recommend recording the source of your OCR text and whether it's been reviewed. Since this is a fully automated process it is extremely handy to be able to reprocess items in the future if your software improves without accidentally clobbering any items which have been hand-corrected by humans.
                        &lt;/li&gt;
                        &lt;li&gt;The word coordinates are pixel level coordinates based on the input file but our requests are made using calculated percentages since it's often the case that the scans are much higher resolution than we would want to display in a web-browser and our users wouldn't want to wait for a 600-dpi image to download in any case
                        &lt;/li&gt;
                        &lt;li&gt;You might be wondering why all of this work is performed on the client side rather than having the server return highlighted images. In addition to reducing server load, this approach is friendlier for caches because a given image segment can be reused for multiple words (rounding the coordinates improves the cache hit ratio significantly) and both the image and word coordinates can thus be cached by &lt;a href="http://en.wikipedia.org/wiki/Content_delivery_network" title="Content delivery network - Wikipedia, the free encyclopedia"&gt;CDN edge servers&lt;/a&gt; rather than requiring a full round-trip back to the server.&lt;br&gt;
                            One common example of the cache-ability benefit is when you &lt;a href="http://www.wdl.org/en/item/7309/view/1/491/#q=whales"&gt;open a result and start reading it&lt;/a&gt;: in the viewer, we display full page images rather than the trimmed slices so we must fetch new images but those are likely to be cached because they haven't been customized with the search text and we can reuse the locally-cached word coordinates to immediately display the highlighting. If you change your search text within an item, we can again immediately update the display while the revised page list is retrieved.
                        &lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;h3 id="future-directions"&gt;
                        Challenges &amp;amp; Future Directions
                    &lt;/h3&gt;
                    &lt;p&gt;
                        This was supposed to be the simplest thing which could possibly work and it turned out not to be that simple. As you might imagine, this leaves a number of open questions for where to go next:
                    &lt;/p&gt;
                    &lt;ul&gt;
                        &lt;li&gt;OCR results vary considerably based on the quality of the input image. Accuracy can be improved considerably by preprocessing the image to remove borders, noise or use a more sophisticated algorithm to convert a full-color scan into the black-and-white image which Tesseract operates on. The trick is either coming up with good presets for your data, perhaps integrated with an image processing tool like &lt;a href="http://scantailor.sourceforge.net/"&gt;ScanTailor&lt;/a&gt;, or developing smarter code which can select filters based on the characteristics of the image.
                        &lt;/li&gt;
                        &lt;li&gt;For older items, the OCR process is complicated by the condition of the materials, more primitive printing technology and stylistic choices like the &lt;a href="http://en.wikipedia.org/wiki/Long_s"&gt;long s (ſ)&lt;/a&gt; or ligatures which are no longer in common usage and thus not well supported by common OCR programs. One of my future goals is looking into the tools produced by the &lt;a href="http://emop.tamu.edu/"&gt;Early Modern OCR Project&lt;/a&gt; and seeing whether there's a production-ready path for this.
                        &lt;/li&gt;
                        &lt;li&gt;It would be interesting combine the results of OCR with my earlier &lt;a href="http://chris.improbable.org/2013/8/31/extracting-images-from-scanned-pages/" title="Extracting images from scanned book pages"&gt;figure extraction project&lt;/a&gt; for innovative displays like the &lt;a href="http://mechanicalcurator.tumblr.com/"&gt;Mechanical Curator&lt;/a&gt; or, with more work, trying to extract full figures with captions.
                        &lt;/li&gt;
                        &lt;li&gt;Finally, there's considerable room for integrating crowd-sourcing approaches like the direct text correction as epitomized by the &lt;a href="http://trove.nla.gov.au/newspaper"&gt;National Library of Australia's wonderful Trove project&lt;/a&gt; and promising improvements on that concept like the UMD-MITH's &lt;a href="http://mith.umd.edu/research/project/active-ocr/" title="Active OCR"&gt;ActiveOCR&lt;/a&gt; project.&lt;br&gt;
                            &lt;br&gt;
                            This seems like an area for research which any organization with large digitized collections should be supporting, particularly with an eye towards easier reuse. &lt;a href="http://inkdroid.org"&gt;Ed Summers&lt;/a&gt; and I have idly discussed the idea for a generic web application which would display hOCR with the corresponding images for correction with all of the data stored somewhere like Github for full change tracking and review. It seems like something along those lines would be particularly valuable as a public service to avoid the expensive of everyone reinventing large parts of this process customized for their particular workflow.
                        &lt;/li&gt;
                    &lt;/ul&gt;</content>
    <updated>2014-03-19T00:22:46.608059+00:00</updated>
  </entry>
  <entry>
    <title>Dear EFF: please don't pick the wrong fight</title>
    <id>http://chris.improbable.org/2013/10/4/dear-eff/</id>
    <link href="http://chris.improbable.org/2013/10/4/dear-eff/"/>
    <summary>The fight against DRM is not worth discarding your integrity. Misrepresenting the W3C's Encrypted Media Extensions will not do anything useful but it will hold the web back and make the EFF less effective.</summary>
    <content type="html">&lt;p&gt;
                        First, some background: I've been a supporter and donor to the &lt;a href="https://www.eff.org/"&gt;Electronic Frontier Foundation&lt;/a&gt; for a long time – at least 2001, although I believe I started earlier during the &lt;a href="http://wiki.openrightsgroup.org/wiki/Crypto_Wars"&gt;90s Crypto Wars&lt;/a&gt; – and opposed to to &lt;a href="http://en.wikipedia.org/wiki/Digital_rights_management"&gt;DRM&lt;/a&gt; for at least as long. I've also been a fan of &lt;a href="http://en.wikipedia.org/wiki/Danny_O%27Brien"&gt;Danny O'Brien&lt;/a&gt;'s reporting and personal blog for a similarly long time.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Unfortunately, today had me reconsidering that support because of O'Brien's recent blog post: &lt;a href="https://www.eff.org/deeplinks/2013/10/lowering-your-standards"&gt;Lowering Your Standards: DRM and the Future of the W3C&lt;/a&gt; . I feel this marks a dangerous trend of playing very loose with the facts in an attempt to pressure the W3C to drop the &lt;a href="https://dvcs.w3.org/hg/html-media/raw-file/tip/encrypted-media/encrypted-media.html"&gt;Encrypted Media Extensions (EME)&lt;/a&gt; spec and that this is not only like to fail but actually backfire in ensuring that millions of people continue to access content through proprietary, closed systems.
                    &lt;/p&gt;
                    &lt;h3&gt;
                        Background
                    &lt;/h3&gt;
                    &lt;p&gt;
                        A little background information: most video played on the web and particularly commercial content uses &lt;a href="http://en.wikipedia.org/wiki/Adobe_Flash" title="Adobe Flash - Wikipedia, the free encyclopedia"&gt;Adobe's Flash&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Microsoft_Silverlight" title="Microsoft Silverlight - Wikipedia, the free encyclopedia"&gt;Microsoft's Silverlight&lt;/a&gt; plugins to run a video player inside a webpage. Both Flash and Silverlight are full programming environments with a significant range of capabilities beyond video playback and have significant overlap with the features provided by your browser. They're distributed as browser plugins, which require a hefty download to be installed before viewing anything, and both generally require proprietary tools for developers to create applications.
                    &lt;/p&gt;
                    &lt;p&gt;
                        They're annoying for developers because they require using a completely different set of technologies than you use for everything else on the web but many places will write that off as a cost of doing business. What's more of a concern is that both plugins have a history of security problems and neither Microsoft nor Adobe appear to be particularly motivated to build the kind of fast, reliable, automatic update system which the modern browsers have so in addition to requiring your users to download something before viewing content, you're contributing to one of the leading sources of security exploits for the average user. It also means that anyone who wishes to publish video on the web is generally subject to the development roadmap for one of two companies.
                    &lt;/p&gt;
                    &lt;p&gt;
                        HTML5 offers a way out of this mess: browsers could play back video directly, avoiding the massive external dependency and allowing them to make improvements for video as quickly as they do anything else rather than hoping a third-party developer wants to make improvements. &lt;a href="http://en.wikipedia.org/wiki/HTML5_video"&gt;HTML5 &amp;lt;video&amp;gt;&lt;/a&gt; is very easy to use, fast and has a consistent high-quality user experience. Unfortunately anyone looking to use it for commercial content will learn that the licensing rules from all of the major content owners require the use of DRM and thus HTML5 video is not an option.
                    &lt;/p&gt;
                    &lt;h4&gt;
                        What is EME, anyway?
                    &lt;/h4&gt;
                    &lt;p&gt;
                        The W3C's &lt;a href="https://dvcs.w3.org/hg/html-media/raw-file/tip/encrypted-media/encrypted-media.html"&gt;EME&lt;/a&gt; group is working on way to reduce this dependency by adding a general mechanism which allows the use of HTML5 video with a little bit of JavaScript to specify a &lt;abbr title="Content Decryption Module"&gt;CDM&lt;/abbr&gt; and a decryption key for the file. This allows content providers to use the entire modern web stack and limit the DRM dependency to a small chunk of code which handles only the actual decryption – dramatically lowering the &lt;a href="http://en.wikipedia.org/wiki/Attack_surface" title="Attack surface - Wikipedia, the free encyclopedia"&gt;attack surface&lt;/a&gt; and avoiding the need for anywhere near as frequent updates as the actual decryption mechanism is far less complex than the entire, largely-duplicative platform which Flash or Silverlight provide.
                    &lt;/p&gt;
                    &lt;h3&gt;
                        The problem
                    &lt;/h3&gt;
                    &lt;p&gt;
                        DRM does not work and all DRMed content has ended up being available in unencrypted form very quickly because the only way to make DRM work is by completely locking down a device to prevent its owner from running code which can access the unencrypted data and, of course, there's always the &lt;a href="http://en.wikipedia.org/wiki/Analog_hole" title="Analog hole - Wikipedia, the free encyclopedia"&gt;Analog Hole&lt;/a&gt;. The EFF has a &lt;a href="https://www.eff.org/issues/drm"&gt;long, laudable history attempting to educate the public and lawmakers&lt;/a&gt; about these issues and I completely support those efforts.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Unfortunately, this effort has failed. No significant amount of commercial video on the web is available without DRM and users don't seem to care as the billions of dollars of sales through iTunes, Amazon, Google Play, etc. and Netflix is using somewhere around &lt;a href="http://arstechnica.com/tech-policy/2011/05/netflix-now-owns-almost-30-percent-of-north-american-fixed-internet-traffic/"&gt;30% of the total Internet traffic in North America&lt;/a&gt; to serve DRM-encumbered video, mostly using Silverlight. Clearly convenience and availability are more important to people.
                    &lt;/p&gt;
                    &lt;p&gt;
                        The EFF has been taking a hard-line position on EME, focused on slippery-slope claims:
                    &lt;/p&gt;
                    &lt;figure class="quote"&gt;
                        &lt;blockquote&gt;
                            &lt;p&gt;
                                By approving this idea, the W3C has ceded control of the "user agent" (the term for a Web browser in W3C parlance) to a third-party, the content distributor. That breaks a—perhaps until now unspoken—assurance about who has the final say in your Web experience, and indeed who has ultimate control over your computing device.
                            &lt;/p&gt;
                        &lt;/blockquote&gt;…
                        &lt;blockquote&gt;
                            &lt;p&gt;
                                &lt;em&gt;A Web where you cannot cut and paste text; where your browser can't "Save As..." an image&lt;/em&gt;; where the "allowed" uses of saved files are monitored beyond the browser; where JavaScript is sealed away in opaque tombs; and maybe even where we can no longer effectively "View Source" on some sites, is a very different Web from the one we have today. It's a Web where user agents—browsers—must navigate a nest of enforced duties every time they visit a page. It's a place where the next Tim Berners-Lee or Mozilla, if they were building a new browser from scratch, couldn't just look up the details of all the "Web" technologies. They'd have to negotiate and sign compliance agreements with a raft of DRM providers just to be fully standards-compliant and interoperable.
                            &lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;figcaption&gt;
                            &lt;cite&gt;&lt;a href="https://www.eff.org/deeplinks/2013/10/lowering-your-standards"&gt;Lowering Your Standards: DRM and the Future of the W3C&lt;/a&gt;, Danny O'Brien, EFF&lt;/cite&gt; &lt;small&gt;(emphasis mine)&lt;/small&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;p&gt;
                        This is similar to some of the past claims made by &lt;a href="http://craphound.com/bio.php" title="Cory Doctorow’s craphound.com"&gt;Cory Doctorow&lt;/a&gt;:
                    &lt;/p&gt;
                    &lt;figure class="quote"&gt;
                        &lt;blockquote cite="http://www.theguardian.com/technology/blog/2013/mar/12/tim-berners-lee-drm-cory-doctorow"&gt;
                            &lt;p&gt;
                                The first of these conditions – "robustness" against end-user modification – is a blanket ban on all free/open source software (free/open source software, by definition, can be modified by its users). &lt;em&gt;That means that the two most popular browser technologies on the Web – WebKit (used in Chrome and Safari) and Gecko (used in Firefox and related browsers) – would be legally prohibited from implementing whatever "standard" the W3C emerges&lt;/em&gt;.
                            &lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;figcaption&gt;
                            &lt;cite&gt;&lt;a href="http://www.theguardian.com/technology/blog/2013/mar/12/tim-berners-lee-drm-cory-doctorow"&gt;What I wish Tim Berners-Lee understood about DRM&lt;/a&gt;&lt;/cite&gt;, Cory Doctorow, The Guardian. &lt;small&gt;(emphasis mine)&lt;/small&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;p&gt;
                        Both of these are simply wrong: there is no meaningful distinction between what EME proposes and what is already the case with a browser plugin. If Firefox can play Flash or Silverlight content, it can decrypted video using a CDM which is either included in the host operating system, bundled under an agreement similar to Chrome's Flash plugin or installed by the user.
                    &lt;/p&gt;
                    &lt;p&gt;
                        The real problem is that they're arguing the wrong point: those requests have always been made and, in most cases, have already happened. The lack of a W3C standard hasn't prevented the Amazon Kindle app from preventing your ability to save unencrypted text, iTunes from blocking saving snippets of a rented movie, etc. and it hasn't prevented either Adobe or Microsoft from adding every DRM feature requested by the content owners. What this has done is ensured that the web community hasn't had much say in the process because all of the content is created and played using proprietary closed software.
                    &lt;/p&gt;
                    &lt;p&gt;
                        &lt;strong&gt;The EFF is shouting loudly but only Adobe and Microsoft will benefit&lt;/strong&gt;. There's no indication whatsoever that the studios are going to drop their DRM requirements if this W3C spec is scuttled – we'll just continue to see a lot of opaque plugin content and, of course, more pressure away from the web towards proprietary app stores. Mozilla's Asa Dotzler summed this up perfectly earlier today on &lt;a href="https://news.ycombinator.com/item?id=6492027"&gt;Hacker News:&lt;/a&gt; &lt;q cite="https://news.ycombinator.com/item?id=6492027"&gt;[T]he businesses (Hollywood) with the content that Web users want have done that math and decided that DRM through plug-ins and native apps is an EXCELLENT system and they're happy to keep mandating it forever. If Plug-ins go away, as they're slowly but surely doing, then native apps will be the only place to get this content.&lt;/q&gt;
                    &lt;/p&gt;
                    &lt;p&gt;
                        This approach also runs the risk of damaging the reputation of the EFF and making it less effective: beyond basic factual problems, exaggerating the risks will backfire badly if people look and – correctly – see that the situation isn't so terrible (Netflix at $10/month is absurdly popular despite the DRM) and discount future claims made by the EFF. They'll need that credibility as the &lt;a href="http://boingboing.net/2012/08/23/civilwar.html"&gt;war on general purpose computing&lt;/a&gt; continues — and Cory is not wrong to sound the alarm over that.
                    &lt;/p&gt;
                    &lt;p&gt;
                        What the open web community should be doing now is working to ensure that EME is designed in a way which improves security and reduces the proprietary footprint. If the standard for CDMs includes aggressive sandboxing it's a huge win for security alone even if all it does is turn Flash into a collective bad memory for web users. Additionally, separating the task of building a decryption module from building a high-performance video player with robust networking, makes it significantly easier for new vendors to enter the market and increases portability because so much less code needs to be adapted to a new platform.
                    &lt;/p&gt;
                    &lt;p&gt;
                        There are some interesting long-term trends, as well: more education about the risks of DRMed content is good and reducing what consumers are willing to pay for restricted content may be the best long-term strategy. Some of that effort needs to be directed towards content owners and providers who are thinking about investing in complex, expensive systems which don't actually work. A very interesting approach was highlighted by Mozilla's &lt;a href="https://brendaneich.com/"&gt;Brendan Eich&lt;/a&gt; earlier this year in the form of OTOY's pure-JavaScript video codec which in addition to avoiding all of the issues with binary plugins has first-class support for &lt;a href="http://en.wikipedia.org/wiki/Digital_watermarking" title="Digital watermarking - Wikipedia, the free encyclopedia"&gt;watermarking&lt;/a&gt;.
                    &lt;/p&gt;
                    &lt;figure class="quote"&gt;
                        &lt;blockquote cite="https://brendaneich.com/2013/05/today-i-saw-the-future/"&gt;
                            &lt;p&gt;
                                Watermarking, not DRM. This could be huge. OTOY’s GPU cloud approach enables individually watermarking every intra-frame, and according to some of its Hollywood supporters including Ari Emanuel, this may be enough to eliminate the need for DRM.
                            &lt;/p&gt;
                        &lt;/blockquote&gt;
                        &lt;figcaption&gt;
                            &lt;cite&gt;&lt;a href="https://brendaneich.com/2013/05/today-i-saw-the-future/"&gt;Today I saw the future&lt;/a&gt;, Brendan Eich (Mozilla CTO)&lt;/cite&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;p&gt;
                        Obviously a shift away from the DRM obsession won't happen overnight but it's not impossible, either, as content owners are concerned about the market leverage which the major DRM vendors like Apple and Amazon have. There's space for smart players willing to back away from DRM in favor of an approach which works at least as well and doesn't require hardware vendors to sell out their users. As Brendan said, &lt;a href="https://news.ycombinator.com/item?id=6496128"&gt;&lt;q cite="https://news.ycombinator.com/item?id=6496128"&gt;there is hope&lt;/q&gt;&lt;/a&gt;.
                    &lt;/p&gt;
                    &lt;div&gt;
                        &lt;h4&gt;
                            2013-10-24 update
                        &lt;/h4&gt;
                        &lt;p&gt;
                            Brendan Eich, Mozilla's CTO, posted his position on the EME issue: &lt;a href="https://brendaneich.com/2013/10/the-bridge-of-khazad-drm/"&gt;The Bridge of Khazad-DRM&lt;/a&gt;. Pushing the W3C for CDM-level interoperability is a good call and definitely feels characteristic of Mozilla by balancing the goal of protecting users’ interests with the realistic constraints of the current browser market. I strongly hope they succeed.
                        &lt;/p&gt;
                        &lt;p&gt;
                            Since Mozilla seems to be the only browser vendor taking a strong position in favor of user rights, now is a great time to &lt;a href="https://join.mozilla.org"&gt;support their work with a donation&lt;/a&gt;.
                        &lt;/p&gt;
                    &lt;/div&gt;
                    &lt;aside&gt;
                        &lt;h4&gt;
                            Disclaimer
                        &lt;/h4&gt;
                        &lt;p&gt;
                            While I work at the Library of Congress, I do not work for the Copyright Office and have no connection with official policy and my job does not involve copyright, intellectual property or DRM in any way. Just to reiterate the site-wide footer message: this is solely my personal opinion written on my own time.
                        &lt;/p&gt;
                    &lt;/aside&gt;</content>
    <updated>2013-10-24T13:44:00+00:00</updated>
  </entry>
  <entry>
    <title>The NSA’s recklessness poses a risk to US business</title>
    <id>http://chris.improbable.org/2013/9/19/nsa-risks-to-us-businesses/</id>
    <link href="http://chris.improbable.org/2013/9/19/nsa-risks-to-us-businesses/"/>
    <summary>The NSA’s recklessness poses a risk to US business. IT is one of the bright spots in the US economy – perhaps our government should be more cautious about helping the competition…</summary>
    <content type="html">&lt;p&gt;
                        This is a great example of how the NSA's rogue actions are going to be endangering US IT companies for years: RSA has a security advisory out for several products, including a widely-used cryptography library, which defaulted to using the Dual EC DRBG random number generator, which we now know was released by the NSA with a backdoor to make it easier to spy on people.
                    &lt;/p&gt;
                    &lt;blockquote cite="http://www.wired.com/threatlevel/2013/09/rsa-advisory-nsa-algorithm/"&gt;
                        &lt;p&gt;
                            Amidst all of the confusion and concern over an encryption algorithm that may contain an NSA backdoor, RSA Security released an advisory to developer customers today noting that the algorithm is the default algorithm in one of its toolkits and strongly advises them to stop using the algorithm.
                        &lt;/p&gt;&lt;cite&gt;&lt;a href="http://www.wired.com/threatlevel/2013/09/rsa-advisory-nsa-algorithm/"&gt;RSA Tells Its Developer Customers: Stop Using NSA-Linked Algorithm&lt;/a&gt;, Kim Zetter, Wired&lt;/cite&gt;
                    &lt;/blockquote&gt;
                    &lt;p&gt;
                        This likely makes things weaker in a way which others could exploit – and given the high odds that people in e.g. China and Russia are racing to test that, it's likely that the NSA's actions exposed millions of people to unnecessary additional risk by weakening important software.
                    &lt;/p&gt;
                    &lt;p&gt;
                        It's likely even more damaging, however, to the US IT industry's future. We can ship updates to software relatively quickly but the question of trust is going to be much thornier: almost every RSA customer – and especially foreign ones – must be asking whether RSA was innocently dupe or actively collaborating. Given how much business they do with the US government, they're probably never going to be able to convincingly disprove that theory. Every other major security vendor in the US and certain allied countries is going to face a similar question: “How do we know you won't be in the news next?”
                    &lt;/p&gt;</content>
    <updated>2013-09-20T00:31:26.093447+00:00</updated>
  </entry>
  <entry>
    <title>The NSA’s recklessness poses a risk to US business</title>
    <id>http://chris.improbable.org/2013/09/19/nsa-risks-to-us-businesses/</id>
    <link href="http://chris.improbable.org/2013/09/19/nsa-risks-to-us-businesses/"/>
    <summary>The NSA’s recklessness poses a risk to US business. IT is one of the bright spots in the US economy – perhaps our government should be more cautious about helping the competition…</summary>
    <content type="html">&lt;p&gt;
                        This is a great example of how the NSA's rogue actions are going to be endangering US IT companies for years: RSA has a security advisory out for several products, including a widely-used cryptography library, which defaulted to using the Dual EC DRBG random number generator, which we now know was released by the NSA with a backdoor to make it easier to spy on people.
                    &lt;/p&gt;
                    &lt;blockquote cite="http://www.wired.com/threatlevel/2013/09/rsa-advisory-nsa-algorithm/"&gt;
                        &lt;p&gt;
                            Amidst all of the confusion and concern over an encryption algorithm that may contain an NSA backdoor, RSA Security released an advisory to developer customers today noting that the algorithm is the default algorithm in one of its toolkits and strongly advises them to stop using the algorithm.
                        &lt;/p&gt;&lt;cite&gt;&lt;a href="http://www.wired.com/threatlevel/2013/09/rsa-advisory-nsa-algorithm/"&gt;RSA Tells Its Developer Customers: Stop Using NSA-Linked Algorithm&lt;/a&gt;, Kim Zetter, Wired&lt;/cite&gt;
                    &lt;/blockquote&gt;
                    &lt;p&gt;
                        This likely makes things weaker in a way which others could exploit – and given the high odds that people in e.g. China and Russia are racing to test that, it's likely that the NSA's actions exposed millions of people to unnecessary additional risk by weakening important software.
                    &lt;/p&gt;
                    &lt;p&gt;
                        It's likely even more damaging, however, to the US IT industry's future. We can ship updates to software relatively quickly but the question of trust is going to be much thornier: almost every RSA customer – and especially foreign ones – must be asking whether RSA was innocently dupe or actively collaborating. Given how much business they do with the US government, they're probably never going to be able to convincingly disprove that theory. Every other major security vendor in the US and certain allied countries is going to face a similar question: “How do we know you won't be in the news next?”
                    &lt;/p&gt;</content>
    <updated>2013-09-20T00:31:26.093447+00:00</updated>
  </entry>
  <entry>
    <title>Extracting images from scanned book pages</title>
    <id>http://chris.improbable.org/2013/8/31/extracting-images-from-scanned-pages/</id>
    <link href="http://chris.improbable.org/2013/8/31/extracting-images-from-scanned-pages/"/>
    <summary>A first step toward building a visual index for books automatically</summary>
    <content type="html">&lt;p&gt;
                        I work on a project which has placed &lt;a title="List of books available from the World Digital Library" href="http://www.wdl.org/en/search/?item_type=book"&gt;a number of books&lt;/a&gt; online. Over the years we've improved server performance and worked on a &lt;a href="https://github.com/LibraryOfCongress/wdl-viewer/"&gt;fast, responsive viewer for scanned books&lt;/a&gt; to make our books as accessible as possible but it's still challenging to help visitors find something of interest out of hundreds of thousands of scanned pages.
                    &lt;/p&gt;
                    &lt;p&gt;
                        &lt;a href="http://www.trevorowens.org"&gt;Trevor&lt;/a&gt; and I have discussed various ways to improve the situation and one idea which seemed promising was seeing how hard it would be to extract the images from digitized pages so we could present a visual index of an item. Trevor’s THATCamp CHNM post on &lt;a href="http://chnm2013.thatcamp.org/06/03/freeing-images-from-inside-digitized-books-and-newspapers/"&gt;Freeing Images from Inside Digitized Books and Newspapers&lt;/a&gt; got a favorable reception and since it kept coming up at work I decided to see how far I could get using &lt;a href="http://www.opencv.org/"&gt;OpenCV&lt;/a&gt;.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Everything you see below is open-source and &lt;a href="mailto:chris@improbable.org"&gt;comments are highly welcome&lt;/a&gt;. I created a &lt;a href="https://github.com/acdha/image-mining/tree/book-illustration-detection"&gt;book-illustration-detection&lt;/a&gt; branch in my &lt;a href="https://github.com/acdha/image-mining/"&gt;image mining&lt;/a&gt; project (see my previous &lt;a href="http://chris.improbable.org/2013/06/30/reconstructing-thumbnails-using-opencv/"&gt;experiment reconstructing higher-resolution thumbnails from the masters&lt;/a&gt;) so feel free to fork it or open issues.
                    &lt;/p&gt;
                    &lt;p&gt;
                        The &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py"&gt;current process (locate-figures.py)&lt;/a&gt; is rather primitive:
                    &lt;/p&gt;
                    &lt;ol&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L30"&gt;convert the image to grayscale&lt;/a&gt;, which is both necessary for some of the algorithms
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L34"&gt;apply a binary filter converting image to black and white&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li&gt;Optionally, apply an &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L61-L67"&gt;erode&lt;/a&gt; or &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L70-L76"&gt;dilate&lt;/a&gt; filter (see the &lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html"&gt;OpenCV erosion and dilation tutorial&lt;/a&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;Optionally, apply &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L80"&gt;Canny edge detection&lt;/a&gt; (&lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html"&gt;OpenCV tutorial&lt;/a&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L83"&gt;find contours&lt;/a&gt; (i.e. what appear to be lines) (&lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/shapedescriptors/find_contours/find_contours.html"&gt;OpenCV tutorial&lt;/a&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L95-L122"&gt;Filter contours which are very small or very large&lt;/a&gt;, to avoid extracting small things like defects, letters, etc. or large artifacts like borders from the scanning process which span an entire edge
                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;p&gt;
                        The program requires Python, &lt;a href="http://www.opencv.org"&gt;OpenCV&lt;/a&gt; and &lt;a href="http://numpy.org/"&gt;numpy&lt;/a&gt;, all of which should be easy to install on Ubuntu/Debian Linux or using &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; on OS X. When the prerequisites are installed, the program can be run like this:
                    &lt;/p&gt;
                    &lt;figure&gt;
                        &lt;img style="max-width: 60%" src="applying-filters-2.jpg"&gt;
                        &lt;figcaption&gt;
                            Applying filters interactively, with contours and their bounding boxes displayed
                            &lt;pre&gt;
&lt;code&gt;locate-figures.py --interactive 211_1_82.png sn99021999_1913-08-31_1_1.png&lt;/code&gt;
&lt;/pre&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;h3&gt;
                        Results
                    &lt;/h3&gt;
                    &lt;p&gt;
                        The results are quite promising:
                    &lt;/p&gt;&lt;!-- TODO: finish migrating to sane CSS for figures --&gt;
                    &lt;div style="text-align: center"&gt;
                        &lt;figure&gt;
                            &lt;a href="http://chroniclingamerica.loc.gov/lccn/sn99021999/1913-08-31/ed-1/seq-1/"&gt;&lt;img style="border: solid blue 1px" width="291" height="309" src="/experiments/opencv/page-image-extraction/sn99021999_1913-08-31_1_1%20extract%205489.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted cartoon from the &lt;a href="http://chroniclingamerica.loc.gov/lccn/sn99021999/1913-08-31/ed-1/seq-1/"&gt;Omaha Daily Bee front page for August 31st, 1913&lt;/a&gt; &lt;a href="http://chroniclingamerica.loc.gov/lccn/sn99021999/1913-08-31/ed-1/seq-1.jp2"&gt;JPEG-2000 Master&lt;/a&gt; (courtesy of &lt;a href="http://chroniclingamerica.loc.gov/"&gt;Chronicling America&lt;/a&gt;)
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                        &lt;figure&gt;
                            &lt;a href="http://www.wdl.org/en/item/211/view/1/77/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_77%20extract%201622.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted illustration from &lt;a href="http://www.wdl.org/en/item/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                        &lt;figure&gt;
                            &lt;a href="http://www.wdl.org/en/item/211/view/1/246/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_246%20extract%201654.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted illustration from &lt;a href="http://www.wdl.org/en/item/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                        &lt;figure&gt;
                            &lt;a href="http://www.wdl.org/en/item/101/view/1/26/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/101/101_1_26%20extract%201267.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted print from &lt;a href="http://www.wdl.org/en/item/101/"&gt;Guide to the Great Siberian Railway&lt;/a&gt;
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                    &lt;/div&gt;
                    &lt;p&gt;
                        There are, of course, some problems:
                    &lt;/p&gt;
                    &lt;figure style="text-align: center"&gt;
                        &lt;a href="http://www.wdl.org/en/item/211/view/1/253/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_253%20extract%20805.jpg"&gt;&lt;/a&gt; &lt;a href="http://www.wdl.org/en/item/211/view/1/253/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_253%20extract%2010415.jpg"&gt;&lt;/a&gt;
                        &lt;figcaption&gt;
                            Multiple contours were detected in multiple points of this illustration but unfortunately they weren't seen as contiguous and both were large enough to be extracted
                            &lt;aside&gt;
                                (Source: &lt;a href="http://www.wdl.org/en/item/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;)
                            &lt;/aside&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;p&gt;
                        The full results are worth reviewing – I was surprised at the quality from the initial pass:
                    &lt;/p&gt;
                    &lt;ul&gt;
                        &lt;li&gt;
                            &lt;a href="/experiments/opencv/page-image-extraction/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="/experiments/opencv/page-image-extraction/101/"&gt;Guide to the Great Siberian Railway&lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;p&gt;
                        There are some obvious areas for improvement such as attempting to prevent the above problem by filtering boxes which are entirely contained within other boxes. It would also be interesting to attempt to examine the surrounding area to see whether there appears to be a caption.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Cool ideas? Deep experience with image processing? &lt;a href="mailto:chris@improbable.org"&gt;I'd love to hear what you think&lt;/a&gt;.
                    &lt;/p&gt;</content>
    <updated>2013-08-31T22:15:00+00:00</updated>
  </entry>
  <entry>
    <title>Extracting images from scanned book pages</title>
    <id>http://chris.improbable.org/2013/08/31/extracting-images-from-scanned-pages/</id>
    <link href="http://chris.improbable.org/2013/08/31/extracting-images-from-scanned-pages/"/>
    <summary>A first step toward building a visual index for books automatically</summary>
    <content type="html">&lt;p&gt;
                        I work on a project which has placed &lt;a title="List of books available from the World Digital Library" href="http://www.wdl.org/en/search/?item_type=book"&gt;a number of books&lt;/a&gt; online. Over the years we've improved server performance and worked on a &lt;a href="https://github.com/LibraryOfCongress/wdl-viewer/"&gt;fast, responsive viewer for scanned books&lt;/a&gt; to make our books as accessible as possible but it's still challenging to help visitors find something of interest out of hundreds of thousands of scanned pages.
                    &lt;/p&gt;
                    &lt;p&gt;
                        &lt;a href="http://www.trevorowens.org"&gt;Trevor&lt;/a&gt; and I have discussed various ways to improve the situation and one idea which seemed promising was seeing how hard it would be to extract the images from digitized pages so we could present a visual index of an item. Trevor’s THATCamp CHNM post on &lt;a href="http://chnm2013.thatcamp.org/06/03/freeing-images-from-inside-digitized-books-and-newspapers/"&gt;Freeing Images from Inside Digitized Books and Newspapers&lt;/a&gt; got a favorable reception and since it kept coming up at work I decided to see how far I could get using &lt;a href="http://www.opencv.org/"&gt;OpenCV&lt;/a&gt;.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Everything you see below is open-source and &lt;a href="mailto:chris@improbable.org"&gt;comments are highly welcome&lt;/a&gt;. I created a &lt;a href="https://github.com/acdha/image-mining/tree/book-illustration-detection"&gt;book-illustration-detection&lt;/a&gt; branch in my &lt;a href="https://github.com/acdha/image-mining/"&gt;image mining&lt;/a&gt; project (see my previous &lt;a href="http://chris.improbable.org/2013/06/30/reconstructing-thumbnails-using-opencv/"&gt;experiment reconstructing higher-resolution thumbnails from the masters&lt;/a&gt;) so feel free to fork it or open issues.
                    &lt;/p&gt;
                    &lt;p&gt;
                        The &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py"&gt;current process (locate-figures.py)&lt;/a&gt; is rather primitive:
                    &lt;/p&gt;
                    &lt;ol&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L30"&gt;convert the image to grayscale&lt;/a&gt;, which is both necessary for some of the algorithms
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L34"&gt;apply a binary filter converting image to black and white&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li&gt;Optionally, apply an &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L61-L67"&gt;erode&lt;/a&gt; or &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L70-L76"&gt;dilate&lt;/a&gt; filter (see the &lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation.html"&gt;OpenCV erosion and dilation tutorial&lt;/a&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;Optionally, apply &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L80"&gt;Canny edge detection&lt;/a&gt; (&lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector.html"&gt;OpenCV tutorial&lt;/a&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L83"&gt;find contours&lt;/a&gt; (i.e. what appear to be lines) (&lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/shapedescriptors/find_contours/find_contours.html"&gt;OpenCV tutorial&lt;/a&gt;)
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="https://github.com/acdha/image-mining/blob/914b5c2c2d83508826933ca0b5b92ab28c6f97b8/bin/locate-figures.py#L95-L122"&gt;Filter contours which are very small or very large&lt;/a&gt;, to avoid extracting small things like defects, letters, etc. or large artifacts like borders from the scanning process which span an entire edge
                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;p&gt;
                        The program requires Python, &lt;a href="http://www.opencv.org"&gt;OpenCV&lt;/a&gt; and &lt;a href="http://numpy.org/"&gt;numpy&lt;/a&gt;, all of which should be easy to install on Ubuntu/Debian Linux or using &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt; on OS X. When the prerequisites are installed, the program can be run like this:
                    &lt;/p&gt;
                    &lt;figure&gt;
                        &lt;img style="max-width: 60%" src="applying-filters-2.jpg"&gt;
                        &lt;figcaption&gt;
                            Applying filters interactively, with contours and their bounding boxes displayed
                            &lt;pre&gt;
&lt;code&gt;locate-figures.py --interactive 211_1_82.png sn99021999_1913-08-31_1_1.png&lt;/code&gt;
&lt;/pre&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;h3&gt;
                        Results
                    &lt;/h3&gt;
                    &lt;p&gt;
                        The results are quite promising:
                    &lt;/p&gt;&lt;!-- TODO: finish migrating to sane CSS for figures --&gt;
                    &lt;div style="text-align: center"&gt;
                        &lt;figure&gt;
                            &lt;a href="http://chroniclingamerica.loc.gov/lccn/sn99021999/1913-08-31/ed-1/seq-1/"&gt;&lt;img style="border: solid blue 1px" width="291" height="309" src="/experiments/opencv/page-image-extraction/sn99021999_1913-08-31_1_1%20extract%205489.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted cartoon from the &lt;a href="http://chroniclingamerica.loc.gov/lccn/sn99021999/1913-08-31/ed-1/seq-1/"&gt;Omaha Daily Bee front page for August 31st, 1913&lt;/a&gt; &lt;a href="http://chroniclingamerica.loc.gov/lccn/sn99021999/1913-08-31/ed-1/seq-1.jp2"&gt;JPEG-2000 Master&lt;/a&gt; (courtesy of &lt;a href="http://chroniclingamerica.loc.gov/"&gt;Chronicling America&lt;/a&gt;)
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                        &lt;figure&gt;
                            &lt;a href="http://www.wdl.org/en/item/211/view/1/77/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_77%20extract%201622.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted illustration from &lt;a href="http://www.wdl.org/en/item/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                        &lt;figure&gt;
                            &lt;a href="http://www.wdl.org/en/item/211/view/1/246/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_246%20extract%201654.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted illustration from &lt;a href="http://www.wdl.org/en/item/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                        &lt;figure&gt;
                            &lt;a href="http://www.wdl.org/en/item/101/view/1/26/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/101/101_1_26%20extract%201267.jpg"&gt;&lt;/a&gt;
                            &lt;figcaption&gt;
                                Extracted print from &lt;a href="http://www.wdl.org/en/item/101/"&gt;Guide to the Great Siberian Railway&lt;/a&gt;
                            &lt;/figcaption&gt;
                        &lt;/figure&gt;
                    &lt;/div&gt;
                    &lt;p&gt;
                        There are, of course, some problems:
                    &lt;/p&gt;
                    &lt;figure style="text-align: center"&gt;
                        &lt;a href="http://www.wdl.org/en/item/211/view/1/253/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_253%20extract%20805.jpg"&gt;&lt;/a&gt; &lt;a href="http://www.wdl.org/en/item/211/view/1/253/"&gt;&lt;img style="border: solid blue 1px" src="/experiments/opencv/page-image-extraction/211/211_1_253%20extract%2010415.jpg"&gt;&lt;/a&gt;
                        &lt;figcaption&gt;
                            Multiple contours were detected in multiple points of this illustration but unfortunately they weren't seen as contiguous and both were large enough to be extracted
                            &lt;aside&gt;
                                (Source: &lt;a href="http://www.wdl.org/en/item/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;)
                            &lt;/aside&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;p&gt;
                        The full results are worth reviewing – I was surprised at the quality from the initial pass:
                    &lt;/p&gt;
                    &lt;ul&gt;
                        &lt;li&gt;
                            &lt;a href="/experiments/opencv/page-image-extraction/211/"&gt;The Amazon and Madeira Rivers: Sketches and Descriptions from the Note-Book of an Explorer&lt;/a&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;a href="/experiments/opencv/page-image-extraction/101/"&gt;Guide to the Great Siberian Railway&lt;/a&gt;
                        &lt;/li&gt;
                    &lt;/ul&gt;
                    &lt;p&gt;
                        There are some obvious areas for improvement such as attempting to prevent the above problem by filtering boxes which are entirely contained within other boxes. It would also be interesting to attempt to examine the surrounding area to see whether there appears to be a caption.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Cool ideas? Deep experience with image processing? &lt;a href="mailto:chris@improbable.org"&gt;I'd love to hear what you think&lt;/a&gt;.
                    &lt;/p&gt;</content>
    <updated>2013-08-31T22:15:00+00:00</updated>
  </entry>
  <entry>
    <title>How simple web kiosks have become thanks to Webconverger</title>
    <id>http://chris.improbable.org/2013/8/29/how-simple-web-kiosks-have-become/</id>
    <link href="http://chris.improbable.org/2013/8/29/how-simple-web-kiosks-have-become/"/>
    <summary>Creating a fullscreen web app kiosk has never been easier thanks to Webconverger</summary>
    <content type="html">&lt;p&gt;
                        Recently I decided it was time to get around to creating a dashboard for the &lt;a href="http://www.wdl.org/"&gt;World Digital Library&lt;/a&gt;. We'd talked about it for years but there was always the hassle of maintaining another system acting as a deterrent for a side project. Since browsers have become more capable, however, I decided yesterday to see how far I could get with a pure static HTML page and a static boot-to-browser system.
                    &lt;/p&gt;
                    &lt;p&gt;
                        I quickly found &lt;a href="http://webconverger.org/"&gt;Webconverger&lt;/a&gt;, which is a Debian derivative intended for kiosks, schools &amp;amp; libraries, etc. A quick look at the &lt;a href="http://webconverger.org/API/"&gt;API documentation&lt;/a&gt; showed that all of the configuration I needed was possible simply by editing the boot-loader config. I tossed together a quick HTML page which loaded various things from Twitter, &lt;a href="https://graphite.readthedocs.org"&gt;Graphite&lt;/a&gt;, Atom feeds, etc. and tossed it into an S3 bucket.
                    &lt;/p&gt;
                    &lt;h2&gt;
                        Building the bootable USB key
                    &lt;/h2&gt;
                    &lt;ol&gt;
                        &lt;li&gt;I downloaded the &lt;a href="http://dl.webconverger.com/latest.iso"&gt;ISO image&lt;/a&gt; and used dd to transfer it to a spare USB key (thanks conference vendors!) and booted to confirm that my hardware was supported and that the page looked great after typing the URL into the browser.
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;p&gt;
                                As per the documentation, everything worked automatically once I added a few boot parameters at startup: &lt;code&gt;noblank chrome=webcfullscreen homepage=http://example.org&lt;/code&gt;
                            &lt;/p&gt;
                            &lt;p&gt;
                                Unfortunately, on OS X there's no easy way to mount an ISO image read-write so it's not as simple as editing the file in your favorite editor…
                            &lt;/p&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;p&gt;
                                Now for the applied laziness: there's a paid configuration service and full developer instructions, and for that matter there are generic ISO editing tools, but I really just wanted to edit a text file which lives in &lt;code&gt;/boot/live.cfg&lt;/code&gt; and it felt somewhat excessive to setup a full toolchain to change a few bytes of ASCII text
                            &lt;/p&gt;
                            &lt;p&gt;
                                Solution: make a copy of the ISO file, open up &lt;a href="http://ridiculousfish.com/hexfiend/"&gt;Hex Fiend&lt;/a&gt; and search for a string which would only appear in the target file, as determined by looking in &lt;code&gt;/boot/live.cfg&lt;/code&gt; after mounting the ISO read-only:&lt;br&gt;
                                &lt;code&gt;append initrd=/live/initrd2.img boot=live skipconfig quiet splash&lt;/code&gt;
                            &lt;/p&gt;
                            &lt;aside&gt;
                                (Did I really just describe hex-editing a binary file as the easy option? Well, yes — it's a standard system search dialog, a click to move the cursor, pasting, a click to change panes and holding down the 0 key for a few seconds. If you've ever tried to get Word to format a large document consistently, this is a piece of cake…)
                            &lt;/aside&gt;
                        &lt;/li&gt;
                        &lt;li&gt;It's not quite simple as simply inserting text because I don't want to corrupt the ISO image by changing the size but fortunately there's a ton of boilerplate which I don't need for a simple dashboard. Like most C programs, the bootloader is almost certain to stop reading once it finds null bytes and indeed a quick glance shows a block of 00 bytes starting after the final character in the file.
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;p&gt;
                                A quick pass through an editor and I have the following trimmed down config with the customizations on the end of the append line:
                            &lt;/p&gt;
                            &lt;pre style="white-space: pre; word-wrap: normal; overflow-x: scroll"&gt;
DEFAULT live-686-pae

label live-686-pae
        menu label 686-pae: Live
        kernel /live/vmlinuz2
        append initrd=/live/initrd2.img boot=live skipconfig quiet splash bootfrom=removable &lt;strong&gt;noblank chrome=webcfullscreen homepage=http://example.org&lt;/strong&gt;
&lt;/pre&gt;
                            &lt;p&gt;
                                Past it in at the start of live.cfg, switch to the hex pane and pad out the file with NULLs until the original text is completely replaced.
                            &lt;/p&gt;
                        &lt;/li&gt;
                        &lt;li&gt;Use dd to write the modified ISO to your USB key and reboot
                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;figure&gt;
                        &lt;img src="dashboard.jpg" width="1360" height="768"&gt;
                        &lt;figcaption&gt;
                            Screenshot of the final dashboard
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;</content>
    <updated>2013-08-29T08:42:00+00:00</updated>
  </entry>
  <entry>
    <title>How simple web kiosks have become thanks to Webconverger</title>
    <id>http://chris.improbable.org/2013/08/29/how-simple-web-kiosks-have-become/</id>
    <link href="http://chris.improbable.org/2013/08/29/how-simple-web-kiosks-have-become/"/>
    <summary>Creating a fullscreen web app kiosk has never been easier thanks to Webconverger</summary>
    <content type="html">&lt;p&gt;
                        Recently I decided it was time to get around to creating a dashboard for the &lt;a href="http://www.wdl.org/"&gt;World Digital Library&lt;/a&gt;. We'd talked about it for years but there was always the hassle of maintaining another system acting as a deterrent for a side project. Since browsers have become more capable, however, I decided yesterday to see how far I could get with a pure static HTML page and a static boot-to-browser system.
                    &lt;/p&gt;
                    &lt;p&gt;
                        I quickly found &lt;a href="http://webconverger.org/"&gt;Webconverger&lt;/a&gt;, which is a Debian derivative intended for kiosks, schools &amp;amp; libraries, etc. A quick look at the &lt;a href="http://webconverger.org/API/"&gt;API documentation&lt;/a&gt; showed that all of the configuration I needed was possible simply by editing the boot-loader config. I tossed together a quick HTML page which loaded various things from Twitter, &lt;a href="https://graphite.readthedocs.org"&gt;Graphite&lt;/a&gt;, Atom feeds, etc. and tossed it into an S3 bucket.
                    &lt;/p&gt;
                    &lt;h2&gt;
                        Building the bootable USB key
                    &lt;/h2&gt;
                    &lt;ol&gt;
                        &lt;li&gt;I downloaded the &lt;a href="http://dl.webconverger.com/latest.iso"&gt;ISO image&lt;/a&gt; and used dd to transfer it to a spare USB key (thanks conference vendors!) and booted to confirm that my hardware was supported and that the page looked great after typing the URL into the browser.
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;p&gt;
                                As per the documentation, everything worked automatically once I added a few boot parameters at startup: &lt;code&gt;noblank chrome=webcfullscreen homepage=http://example.org&lt;/code&gt;
                            &lt;/p&gt;
                            &lt;p&gt;
                                Unfortunately, on OS X there's no easy way to mount an ISO image read-write so it's not as simple as editing the file in your favorite editor…
                            &lt;/p&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;p&gt;
                                Now for the applied laziness: there's a paid configuration service and full developer instructions, and for that matter there are generic ISO editing tools, but I really just wanted to edit a text file which lives in &lt;code&gt;/boot/live.cfg&lt;/code&gt; and it felt somewhat excessive to setup a full toolchain to change a few bytes of ASCII text
                            &lt;/p&gt;
                            &lt;p&gt;
                                Solution: make a copy of the ISO file, open up &lt;a href="http://ridiculousfish.com/hexfiend/"&gt;Hex Fiend&lt;/a&gt; and search for a string which would only appear in the target file, as determined by looking in &lt;code&gt;/boot/live.cfg&lt;/code&gt; after mounting the ISO read-only:&lt;br&gt;
                                &lt;code&gt;append initrd=/live/initrd2.img boot=live skipconfig quiet splash&lt;/code&gt;
                            &lt;/p&gt;
                            &lt;aside&gt;
                                (Did I really just describe hex-editing a binary file as the easy option? Well, yes — it's a standard system search dialog, a click to move the cursor, pasting, a click to change panes and holding down the 0 key for a few seconds. If you've ever tried to get Word to format a large document consistently, this is a piece of cake…)
                            &lt;/aside&gt;
                        &lt;/li&gt;
                        &lt;li&gt;It's not quite simple as simply inserting text because I don't want to corrupt the ISO image by changing the size but fortunately there's a ton of boilerplate which I don't need for a simple dashboard. Like most C programs, the bootloader is almost certain to stop reading once it finds null bytes and indeed a quick glance shows a block of 00 bytes starting after the final character in the file.
                        &lt;/li&gt;
                        &lt;li&gt;
                            &lt;p&gt;
                                A quick pass through an editor and I have the following trimmed down config with the customizations on the end of the append line:
                            &lt;/p&gt;
                            &lt;pre style="white-space: pre; word-wrap: normal; overflow-x: scroll"&gt;
DEFAULT live-686-pae

label live-686-pae
        menu label 686-pae: Live
        kernel /live/vmlinuz2
        append initrd=/live/initrd2.img boot=live skipconfig quiet splash bootfrom=removable &lt;strong&gt;noblank chrome=webcfullscreen homepage=http://example.org&lt;/strong&gt;
&lt;/pre&gt;
                            &lt;p&gt;
                                Past it in at the start of live.cfg, switch to the hex pane and pad out the file with NULLs until the original text is completely replaced.
                            &lt;/p&gt;
                        &lt;/li&gt;
                        &lt;li&gt;Use dd to write the modified ISO to your USB key and reboot
                        &lt;/li&gt;
                    &lt;/ol&gt;
                    &lt;figure&gt;
                        &lt;img src="dashboard.jpg" width="1360" height="768"&gt;
                        &lt;figcaption&gt;
                            Screenshot of the final dashboard
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;</content>
    <updated>2013-08-29T08:42:00+00:00</updated>
  </entry>
  <entry>
    <title>Reconstructing thumbnails using OpenCV</title>
    <id>http://chris.improbable.org/2013/6/30/reconstructing-thumbnails-using-opencv/</id>
    <link href="http://chris.improbable.org/2013/6/30/reconstructing-thumbnails-using-opencv/"/>
    <summary>Building higher-resolution thumbnails given the original master file and a lot of CPU time</summary>
    <content type="html">&lt;h3&gt;
                        Background
                    &lt;/h3&gt;
                    &lt;p&gt;
                        I work with collections of scanned images which have been on the web for awhile. Each one has a hand-selected thumbnail as well as full-image files at various resolutions. Over the years, our default image display size has increased and we're approaching the point where our original thumbnail or reference image size is unpleasantly small. Unfortunately we don't have the data for the various image processing steps which were used to generate these thousands of thumbnails.
                    &lt;/p&gt;
                    &lt;p&gt;
                        I recently decided to experiment with &lt;a href="http://www.opencv.org"&gt;OpenCV&lt;/a&gt; to see whether it would be reasonable to locate the original location within the source files so we can extract new versions at arbitrary resolutions.
                    &lt;/p&gt;
                    &lt;h3&gt;
                        Techniques
                    &lt;/h3&gt;
                    &lt;p&gt;
                        At first glance, the &lt;a href="http://docs.opencv.org/doc/tutorials/imgproc/histograms/template_matching/template_matching.html"&gt;OpenCV template matching tutorial&lt;/a&gt; appears to be perfect for the job: give it a source image and a template image and it will attempt to locate the latter in the former. Unfortunately, this falls apart when the template image has been scaled or rotated, which is the often the case for our collections: all the template matching code is doing is sliding the template image around the source image one pixel at a time and measuring the difference!
                    &lt;/p&gt;
                    &lt;p&gt;
                        Fortunately, there are far more advanced techniques in the modern arsenal for building what are known as scale and rotation invariant feature descriptors. Unless you're a CS grad student, you'll want to start with OpenCV's extensive &lt;a href="http://en.wikipedia.org/wiki/Feature_detection_(computer_vision)"&gt;Feature Detection&lt;/a&gt; suite. This example shows an even harder variant of our problem: &lt;a href="http://docs.opencv.org/doc/tutorials/features2d/feature_homography/feature_homography.html#feature-homography"&gt;using feature homography to locate a significantly distorted image in a photograph&lt;/a&gt; .
                    &lt;/p&gt;
                    &lt;p&gt;
                        For a first pass I'm using &lt;a href="http://en.wikipedia.org/wiki/SURF"&gt;&lt;abbr title="Speeded Up Robust Features"&gt;SURF&lt;/abbr&gt;&lt;/a&gt; with the brute-force matcher, although that will likely change once I take time to compare the other options. This has yielded great results, although the actual match calculation could be faster.
                    &lt;/p&gt;
                    &lt;h3&gt;
                        The Results
                    &lt;/h3&gt;
                    &lt;p&gt;
                        &lt;a href="https://github.com/acdha/image-mining/blob/master/bin/locate-thumbnail.py"&gt;locate-thumbnail.py&lt;/a&gt; has a pretty simple interface which allows you to supply a list of file pairs. It will attempt to reconstruct the original thumbnail from the master image and save the result in the same location. Since the assumption is that you are starting with thumbnails which were originally derived from the master image, it will automatically skip an image if an insufficient number of matching points are detected and since my goal was to get consistently sized output thumbnails the output is coerced to be perfectly rectangular, although it will be rotated by multiples of 90º to match the original orientation as you can see in several examples below.
                    &lt;/p&gt;
                    &lt;p&gt;
                        A basic session looks like this:
                    &lt;/p&gt;
                    &lt;pre class="prettyprint lang-sh"&gt;
$ for i in `seq 1 10`; do echo $i; curl -sko $i.jpg http://content.wdl.org/$i/thumbnail/308x255.jpg -O http://content.wdl.org/$i.png;  done
1
2
…
$ locate-thumbnail.py --display --save-visualization {1..10}.{jpg,png}
INFO locate_thumbnail: Attempting to locate 1.jpg within 1.png
INFO locate_thumbnail: Found 147 matches
INFO find_homography: 130 inliers, 147 matched features
INFO reconstruct_thumbnail: Reconstructing thumbnail from source image
INFO reconstruct_thumbnail: Thumbnail bounds within source image: [[190, 407], [870, 407], [868, 969], [191, 970]]
INFO reconstruct_thumbnail: Resizing from (563, 680) to (308, 255)
Master dimensions: 1271x1024
Thumbnail dimensions: 255x308
Reconstructed thumb dimensions: 255x308
INFO locate_thumbnail: Saved reconstructed thumbnail 1.reconstructed.jpg
INFO locate_thumbnail: Saved match visualization 1.visualized.jpg
INFO locate_thumbnail: Attempting to locate 2.jpg within 2.png
&lt;/pre&gt;
                    &lt;h4&gt;
                        Examples
                    &lt;/h4&gt;
                    &lt;figure&gt;
                        &lt;img src="http://content.wdl.org/10/thumbnail/308x255.jpg"&gt;&lt;img src="examples/10.reconstructed.jpg"&gt;&lt;br&gt;
                        &lt;a href="examples/10.visualized.jpg"&gt;&lt;img src="examples/10.visualized.jpg"&gt;&lt;/a&gt;
                        &lt;figcaption&gt;
                            Reconstructed thumbnail using the &lt;a href="http://www.wdl.org/media/10.png"&gt;PNG&lt;/a&gt; for &lt;a href="http://www.wdl.org/10"&gt;An Actor in the Role of Sato Norikiyo who Becomes Saigyo: An Actor in the Role of Yoshinaka&lt;/a&gt; from the &lt;a href="http://www.wdl.org"&gt;World Digital Library&lt;/a&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;figure&gt;
                        &lt;img src="http://content.wdl.org/3/thumbnail/308x255.jpg"&gt;&lt;img src="examples/3.reconstructed.jpg"&gt;&lt;br&gt;
                        &lt;a href="examples/3.visualized.jpg"&gt;&lt;img src="examples/3.visualized.jpg"&gt;&lt;/a&gt;
                        &lt;figcaption&gt;
                            Reconstructed thumbnail using the &lt;a href="http://www.wdl.org/media/3.png"&gt;PNG&lt;/a&gt; for &lt;a href="http://www.wdl.org/3"&gt;Maps of Ezo, Sakhalin, and Kuril Islands&lt;/a&gt; from the &lt;a href="http://www.wdl.org"&gt;World Digital Library&lt;/a&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;figure&gt;
                        &lt;img src="http://content.wdl.org/1/thumbnail/308x255.jpg"&gt;&lt;img src="examples/1.reconstructed.jpg"&gt;&lt;br&gt;
                        &lt;a href="examples/1.visualized.jpg"&gt;&lt;img src="examples/1.visualized.jpg"&gt;&lt;/a&gt;
                        &lt;figcaption&gt;
                            Reconstructed thumbnail using the &lt;a href="http://www.wdl.org/media/1.png"&gt;PNG&lt;/a&gt; for &lt;a href="http://www.wdl.org/1"&gt;Antietam, Maryland. Allan Pinkerton, President Lincoln, and Major General John A. McClernand: Another View&lt;/a&gt; from the &lt;a href="http://www.wdl.org"&gt;World Digital Library&lt;/a&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;figure&gt;
                        &lt;img src="http://content.wdl.org/22/thumbnail/308x255.jpg"&gt;&lt;img src="examples/22.reconstructed.jpg"&gt;&lt;br&gt;
                        &lt;a href="examples/22.visualized.jpg"&gt;&lt;img src="examples/22.visualized.jpg"&gt;&lt;/a&gt;
                        &lt;figcaption&gt;
                            Reconstructed thumbnail using the &lt;a href="http://www.wdl.org/media/22.png"&gt;PNG&lt;/a&gt; for &lt;a href="http://www.wdl.org/22"&gt;The Island and City of Metropolitan Goa of India&lt;/a&gt; from the &lt;a href="http://www.wdl.org"&gt;World Digital Library&lt;/a&gt;
                        &lt;/figcaption&gt;
                    &lt;/figure&gt;
                    &lt;h4&gt;
                        Quite Possibly Working Code
                    &lt;/h4&gt;
                    &lt;p&gt;
                        All of the code above is available on Github and should run anywhere OpenCV is available: &lt;a href="https://github.com/acdha/image-mining"&gt;https://github.com/acdha/image-mining&lt;/a&gt;. To the extent allowed by law, it has been released into the public domain.
                    &lt;/p&gt;</content>
    <updated>2013-06-30T20:25:23.108473+00:00</updated>
  </entry>
</feed>
